kongcv_get_smscode:得到短信验证码
url:https://api.leancloud.cn/1.1/functions/kongcv_get_smscode
request:
参数说明:
   mobilePhoneNumber - 手机号
请求格式:
   {"mobilePhoneNumber":"xxxxxxxx"}
response:
参数说明:
   result - 返回结果park info
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_verify_smscode:验证短信验证码
url:https://api.leancloud.cn/1.1/functions/kongcv_verify_smscode
request:
参数说明:
   mobilePhoneNumber - 手机号
   smsCode:短信验证码
请求格式:
   {"mobilePhoneNumber":"xxxxxxxx","smsCode":"sssss"}
response:
参数说明:
   result - 返回结果park info
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_verify_mobile:验证账户短信验证码
url:https://api.leancloud.cn/1.1/functions/kongcv_verify_mobile
特别说明:
    用在手机号变更后的短信验证,在https的请求header中加入"X-AVOSCloud-Session-Token:<own sessionToken>"
request:
参数说明:
   smsCode:短信验证码
请求格式:
   {"smsCode":"sssss"}
response:
参数说明:
   result - 返回结果park info
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_put_userinfo:更新用户信息
url:https://api.leancloud.cn/1.1/functions/kongcv_put_userinfo
request:
特别说明:
   在https的请求header中加入"X-AVOSCloud-Session-Token:<own sessionToken>"
参数说明:
   mobilePhoneNumber - 新手机号,如不更新此参数可以不传值或没有,如变更手机需调用kongcv_verify_mobile做短信验证
   user_name - 用户名,如不更新此参数可以不传值或没有
   device_token - 是你从jpush获得的registionId,如不更新此参数可以不传值或没有
   device_type - ios or andriod,如不更新此参数可以不传值或没有
   license_plate - 车牌,如不更新此参数可以不传值或没有
请求格式:
   {"mobilePhoneNumber":"13xxxxxx","user_name":"xxxxx","device_token":"111111", "device_type":"ios", "license_plate":"xxxx"}
response:
参数说明:
   result - 返回结果park info
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_signup:手机号和短信验证码一键注册
url:https://api.leancloud.cn/1.1/functions/kongcv_signup
request:
参数说明:
   mobilePhoneNumber":手机号
   smsCode:短信验证码
   role:角色 park_manager - 停车管理员 worker - 地推人员
   mode:模式 debug - 开发模式 release - 上线模式
正常请求格式:
   {"mobilePhoneNumber":"xxxxxxxx","smsCode":"sssss"}
带角色的请求格式:
   {"mobilePhoneNumber":"xxxxxxxx","smsCode":"sssss","role":"park_manager","mode":"debug"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
   sessionToken - 前端必须保存，修改user数据需要传递sessionToken
   user_id - 用户objectId
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\",\"sessionToken\":"xxxxxxxxx"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_push_smsinfo:发送短信信息
url:https://api.leancloud.cn/1.1/functions/kongcv_push_smsinfo
request:
参数说明:
   mobilePhoneNumber":手机号
   push_type : 发送类型(verify_request-租用请求,verify_accept-接受租用,verify_reject-拒绝租用)
请求格式:
   {"mobilePhoneNumber":"xxxxxxxx", "push_type":"xxx"}
response:
参数说明:
   result - 返回结果park info
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_jpush_message_p2p:发送JPsh推送通知
url:https://api.leancloud.cn/1.1/functions/kongcv_jpush_message_p2p
request:
参数说明:
   mobilePhoneNumber - 对方手机号
   push_type - 发送类型(verify_request-租用请求,verify_accept-接受租用,verify_reject-拒绝租用)
   device_type - 设备类型ios or android
   device_token - 要发送的对方registrationId
   user_id - 自己的user_id
   extras - 附加信息
   park_id - 车位objectId,
   mode - 模式 curb(道边停)community(社区停)
   hire_method_id - 车位出租方式id
   hire_start - 出租起始时间
   hire_end - 出租结束时间
   own_device_token - 自己手机的registrationdId
   own_device_type - 自己手机类型ios or android
   own_mobile - 自己手机号
请求格式:
   verify_request类型下格式:
   {"mobilePhoneNumber":"1xxxxxxx", "push_type":"verify_request", "device_token":"021a12c5dc4", "device_type":"ios", "user_id":"5629973860b28da5c9b6ca16",extras:{"park_id":"56443f7b00b07eb0181283bb","mode":"community","address:"xxxx", "hire_method_id":"561f4cb460b22ed7ca73ab6c","hire_start":"2015-10-17 08:00:00", "hire_end":"2015-10-17 18:00:00","own_device_token":"021a12c5dc4","own_device_type":"ios","own_mobile":"1xxxxx","push_type":"verify_request"}}
   verify_accept类型下格式:
   {"mobilePhoneNumber":"1xxxxxxx", "push_type":"verify_accept", "device_token":"021a12c5dc4", "device_type":"ios", "user_id":"5629973860b28da5c9b6ca16",extras:{"park_id":"56443f7b00b07eb0181283bb","mode":"community", "address":"xxxx","hire_method_id":"561f4cb460b22ed7ca73ab6c","hire_start":"2015-10-17 08:00:00", "hire_end":"2015-10-17 18:00:00","own_mobile":"1xxxxx","push_type":"verify_request"}}
   verify_reject类型下格式:
   {"mobilePhoneNumber":"1xxxxxxx", "push_type":"verify_reject", "device_token":"021a12c5dc4", "device_type":"ios", "user_id":"5629973860b28da5c9b6ca16"}
response:
参数说明:
   result - 返回结果park info
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_accept:插入通知接受数据
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_accept
request:
参数说明:
   req_mobile - 被请求方(出租人)手机号
   user_mobile - 请求方(求租人)自己手机号
   park_id - 停车位的objectId
   mode - 模式 curb(道边停)community(社区停)
   {"req_mobile":"xxxxxxxxxx","user_mobile":"xxxxx","park_id":       "xxxxxxxxxxx","mode":"community"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_accept:得到通知接受数据
url:https://api.leancloud.cn/1.1/functions/kongcv_get_accept
request:
参数说明:
   user_mobile - 请求方(求租人)自己手机号
   park_id - 停车位的objectId
   mode - 模式 curb(道边停)community(社区停)
   {"user_mobile":"xxxxx","park_id":"xxxxxxxxxxx","mode":"community"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_advertise:得到轮播图
url:https://api.leancloud.cn/1.1/functions/kongcv_get_advertise
request:
请求格式:
   {}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - 返回结果集                 
        {recordset json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_bank:得银行信息
url:https://api.leancloud.cn/1.1/functions/kongcv_get_bank
request:
请求格式:
   {}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - 返回结果集                 
        {recordset json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_park_type:得到停车类型
url:https://api.leancloud.cn/1.1/functions/kongcv_get_park_type
request:
请求格式:
   {}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   返回数据中picture是停车类型的图片，url是图片链接,name是类型名称
   RET_OK - 返回结果集                 
        {recordset json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_hire_method:得到停车类型的出租方法
url:https://api.leancloud.cn/1.1/functions/kongcv_get_hire_method
request:
请求格式:
   {"park_type_id":"xxxx"}
参数说明:
   park_type_id - 停车类型的objectId
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   返回数据中method是出租方式
   RET_OK - 返回结果集                 
        {recordset json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_parkdata:插入停车位数据
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_parkdata
request:
参数说明:
   user_id - curb(道边停)模式下,传入管理员手机号,community(社区停)模式下，传入用户objectid
   worker_id - curb(道边停)模式下,传入地推人员objectid,community(社区停)模式下可以不传值or没有这个参数
   address - 停车位地址
   park_detail - 停车位地址的补充描述(数据必须有)
   park_description - 车位描述(车位格式化信息,数据可以为空)
   location_info - 坐标， __type:GeoPoint - 数据类型，latitude - 纬度 longitude - 经度
   hire_start - 出租起始时间,curb(道边停)模式下可以不传值or没有这个参数(车位格式化信息,数据可以为空)
   hire_end - 出租结束时间,curb(道边停)模式下可以不传值or没有这个参数(车位格式化信息,数据可以为空)
   no_hire - 每周不可出租日(车位格式化信息,数据可以为空)
   tail_num - 限行尾号(车位格式化信息,数据可以为空)
   city - 城市
   normal - 正规车位 true:是 false:否，curb(道边停)模式下可以不传值or没有这个参数
   park_area - 车位面积，curb(道边停)模式下可以不传值or没有这个参数(车位格式化信息,数据可以为空)
   park_height - 车位限高，curb(道边停)模式下可以不传值or没有这个参数(车位格式化信息,数据可以为空)
   gate_card - 门禁卡，关于门禁卡的需求，curb(道边停)模式下可以不传值or没有这个参数(车位格式化信息,数据可以为空)
   hire_method_id - 出租类型objectId
   hire_price - 出租价格
   hire_time - 出租时间段
   struct - 结构 地面:0 地下:1 curb(道边停)模式下可以不传值or没有这个参数
   mode - 模式 curb(道边停)community(社区停)
curb请求格式：也适用与community
   {"user_id":"13xxxxxx","worker_id":"5621f1bf60b27db44ed6d6fd","address":"xxxxx","park_detail":"xxxx","park_description":"xxxx","location_info":{"__type":"GeoPoint","latitude":11.1,"longitude":116.4}, "hire_start":"2015-10-17 08:00:00", "hire_end":"2015-10-17 18:00:00","no_hire":["1","2"],"tail_num":"5","city":"beijing", "normal":true, "park_area":10,"park_height":5, "gate_card":"xxxxx","hire_method_id":["5620a6dc60b27457e84bb21d"],"hire_price":["10"],"hire_time":["9:00 - 20:00"],"struct":0,"mode":"curb"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_park_date_list:得到车位租用月列表
url:https://api.leancloud.cn/1.1/functions/kongcv_get_park_date_list
request:
   {"park_id":"xxxxxxxxxxx","query_month":"2015-10-01 00:00:00","skip":0,"limit":10,"pay_state":0, "mode":"community"}
参数说明:
   park_id - 停车位的objectId
   query_month - 查询的月份(例如:8月"2015-08-01 00:00:00", 12月"2015-12-01 00:00:00)
   skip - 跳过记录数
   limit - 限定返回记录数
   mode - 模式 curb(道边停)community(社区停)
   pay_state - 0(所有月交易单),1(所有已完成和已支付定金交易单)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                  
        {record json arrray}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}


kongcv_get_trade_date_list:得到用户租用月列表
url:https://api.leancloud.cn/1.1/functions/kongcv_get_trade_date_list
request:
   {"user_id":"xxxxx", "query_month":"2015-12-01 00:00:00", "role":        "customer","skip":0, "limit":10,"mode":"community", "pay_state":0}
参数说明:
   user_id - 用户的objectId
   query_month - 查询的月份(例如:8月"2015-08-01 00:00:00", 12月"2015-12-01 00:00:00)
   role - 角色, hirer(出租人), hirer_second(辅助出租人-道边),mcustomer(顾客,消费者)
   skip - 跳过记录数
   limit - 限定返回记录数
   mode - 模式 curb(道边停)community(社区停)
   pay_state - 0(所有月交易单),1(所有已完成和已支付定金交易单)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                  
        {record json arrray}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_tradedata:插入交易数据
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_tradedata
request:
参数说明:
   user_id - 用户objectid
   hirer_id - 出租人objectId
   park_id - 停车位的objectId
   hire_start - 交易出租起始时间
   hire_end - 交易出租结束时间
   hire_method_id - 出租类型objectId
   price - 交易价格
   mode - 模式 curb(道边停)community(社区停)
   extra_flag - "0"(根据租用时间判断小于等于1天为短期),"1"长期(大于1天)
   {"user_id":"xxxxxxxxxx","hirer_id":"xxxx","park_id":"xxxxxxxxxxx", "price":100,"hire_start":"2015-10-17 08:00:00", "hire_end":"2015-10-17 18:00:00","hire_method_id":"5620a6dc60b27457e84bb21d","mode":"community","extra_flag":"0"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
   trade_id - 交易单id
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_trade_billdata:插入交易数据
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_trade_billdata
注意：调用kongcv_insert_trad_billdata需要交易单id，如果没有trade_id,需要调用kongcv_insert_tradedata接口,支付差额不需要调用kongcv_insert_tradedata,因为已有交易单id
request:
参数说明:
   trade_id - 交易单objectid
   {"trade_id":"xxxxx"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_put_trade_billdata:插入交易数据
url:https://api.leancloud.cn/1.1/functions/kongcv_put_trade_billdata
request:
参数说明:
   bill_id - 交易账单objectid
   money - 交易钱数
   pay_tool - 支付工具 alipy(支付宝) wxpy(微信支付)
   pay_id - 第三方返回的支付id
   notify_id - 第三方返回的回执id
   pay_type - 支付类型, money(全款),handsel(定金),balance(差额)
   {"bill_id":"5673ee9560b2f42a12731bb9","money":100,"pay_tool":"alipy","pay_id":"123456","notify_id": "123456", "pay_type":"balance"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_comment:插入评论数据
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_comment
request:
参数说明:
   user_id - 用户objectid
   park_id - 停车位的objectId
   comment - 评论内容
   grade - 车位评分
   mode - 模式 curb(道边停)community(社区停)
   {"user_id" : "xxxxxx", "comment" : "test comment", "park_id" : "xxxxxxxxxxx","grade":5, "mode" : "community"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_comment:得到评论数据
url:https://api.leancloud.cn/1.1/functions/kongcv_get_comment
request:
参数说明:
   user_id - 用户objectid
   park_id - 停车位的objectId
   skip - 跳过记录数
   limit - 限定返回记录数
   mode - 模式 curb(道边停)community(社区停)
   {"user_id" : "xxxxxx", "park_id" : "xxxxxxxxxxx", "skip":0, "limit":10, "mode" :"community"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - 返回结果集                 
        {record json arrray}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_location_search:车位搜索
url:https://api.leancloud.cn/1.1/functions/kongcv_location_search
request:
参数说明:
   location_info - 坐标数据
   hire_method_id - 出租方式objectid，如果为所有类型搜索此项可以不传值或没有这个参数
   skip - 跳过记录数
   limit - 限定返回记录数
   mode - 停车模式 curb(道边停)community(社区停)
请求格式:
   {"location_info":{"latitude":11.1,"longitude":116.4},"hire_method_id":"xxxx", "skip":10,"limit":10,"mode":"curb"}
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:      
   RET_OK - 返回结果集                 
        {recordset json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_put_park_hide:设置停车位隐藏
url:https://api.leancloud.cn/1.1/functions/kongcv_put_park_hide
request:
请求格式:
   {"park_id":"xxxx", "mode":"community"}
参数说明:
   park_id - 停车位的objectId
   mode - 模式 curb(道边停)community(社区停)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                 
        {record json}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_park_info:得到停车位详细信息
url:https://api.leancloud.cn/1.1/functions/kongcv_get_park_info
request:
请求格式:
   {"park_id":"xxxx", "mode":"community"}
参数说明:
   park_id - 停车位的objectId
   mode - 模式 curb(道边停)community(社区停)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                 
        {record json}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_park_list:得到停车位列表
url:https://api.leancloud.cn/1.1/functions/kongcv_get_park_list
request:
请求格式:
   {"user_id":"xxxxx", "mobile":"xxxx","skip":0, "limit":10,"mode":        "community", "action":"userid"}
参数说明:
   user_id - 用户objectid
   mobile - 手机号,只能在curb模式下用
   skip - 跳过记录数
   limit - 限定返回记录数
   mode - 模式 curb(道边停)community(社区停)
   action - userid(使用user_id做查询), mobile(使用mobile手机号做查询)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                 
        {record json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_trade_info:得到交易单详细信息
url:https://api.leancloud.cn/1.1/functions/kongcv_get_trade_info
request:
请求格式:
   {"trade_id":"xxxx","role":"hirer", "mode":"community"}
参数说明:
   trade_id - 交易单的objectId
   role - 角色, hirer(出租人), customer(顾客,消费者)
   mode - 模式 curb(道边停)community(社区停)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                 
        {record json}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_trade_list:得到交易单详细信息
url:https://api.leancloud.cn/1.1/functions/kongcv_get_trade_list
request:
请求格式:
   {"user_id":"xxxxx", "role":"customer","trade_state":0, "skip":0, "limit":10,"mode":"community"}
参数说明:
   user_id - 用户的objectId
   role - 角色, hirer(出租人), hirer_second(辅助出租人-道边),mcustomer(顾客,消费者)
   trade_state - 0(未完成交易), 1(已完成交易)
   skip - 跳过记录数
   limit - 限定返回记录数
   mode - 模式 curb(道边停)community(社区停)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                 
        {record json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_pushmessage_list:得到通知列表
url:https://api.leancloud.cn/1.1/functions/kongcv_get_pushmessage_list
request:
请求格式:
   {"mobilePhoneNumber":"1xxxx","skip":0, "limit":10, "action":"send"}
参数说明:
   mobile - 自己的手机号
   action - send(发送的消息),recv(接受的消息)
   skip - 跳过记录数
   limit - 限定返回记录数
response:
   返回结构中state表示message是否操作过
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - 返回结果集                 
        {record json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_feedback:插入反馈信息
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_feedback
request:
请求格式:
   {"user_id":"xxxxx", "feedback":"xxxx"}
参数说明:
   user_id - 用户objectId
   feedback - 反馈信息
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_change_pushmessage_state:改变推送消息状态
url:https://api.leancloud.cn/1.1/functions/kongcv_change_pushmessage_state
request:
请求格式:
   {"message_id":"xxxxx"}
参数说明:
   message_id - 消息objectId
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_query_white_list:查询白名单
url:https://api.leancloud.cn/1.1/functions/kongcv_query_white_list
request:
请求格式:
   {"mobilePhoneNumber":"xxxxx"}
参数说明:
   mobilePhoneNumber - 手机号
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
   RET_FAIL - fail, {\"state\":\"failed\",\"code\":1,\"msg\":\"失败\"}                 
        {"result":"{\"state\":\"ok\",\"code\":0,\"msg\":\"成功\"}"}
        {"result":"{\"state\":\"failed\",\"code\":1,\"msg\":\"失败\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_insert_withdraw_deposit:插入提现数据
url:https://api.leancloud.cn/1.1/functions/kongcv_insert_withdraw_deposit
request:
特别说明:
   在https的请求header中加入"X-AVOSCloud-Session-Token:<own sessionToken>"
请求格式:
   {"user_id":"xxxxx", "money":100}
参数说明:
   user_id - 用户objectId
   money - 提现金额
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":0,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_withdraw_deposit:得到提现数据
url:https://api.leancloud.cn/1.1/functions/kongcv_get_withdraw_deposit
request:
请求格式:
   {"user_id":"xxxxxx","skip":0,"limit":10}
参数说明:
   user_id - 用户objectId
   skip - 跳过记录数
   limit - 限定返回记录数
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success        
        {record json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}
        
kongcv_put_purse:插入或更新钱包信息
url:https://api.leancloud.cn/1.1/functions/kongcv_put_purse
request:
请求格式:
   {"user_id":"xxxx", "bank_card":{"bank":"xxx","card":"xxxxx","name":"xxx"},"passwd":"xxxx", "action":"new"}
参数说明:
   user_id - 用户objectId
   bank_card.bank - 银行类型
   bank_card.card - 银行卡号
   bank_card.name - 持卡人姓名
   passwd - 提现密码,用md5生成校验码
   action - new(新创建),card(更新卡号),passwd(更新密码),system(系统)
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success, {\"state\":\"ok\",\"code\":1,\"msg\":\"成功\"}                 
        {"result":"{\"state\":\"ok\",\"code\":0,\"msg\":\"成功\"}"}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}

kongcv_get_purse:得到钱包数据
url:https://api.leancloud.cn/1.1/functions/kongcv_get_purse
request:
请求格式:
   {"user_id":"xxxxxx","skip":0,"limit":10}
参数说明:
   user_id - 用户objectId
   skip - 跳过记录数
   limit - 限定返回记录数
response:
参数说明:
   result - 返回结果
   state - 状态
   code - 消息编号
   msg - 描述消息
   error - 错误描述
回应格式:
   RET_OK - success        
        {record json array}
   error:
        {code:1,"error":"xxxxxxxxxxxxxx"}
 
